{
  "litComponent": {
    "prefix": "lit-component",
    "body": [
      "import { LitElement, html, css } from 'lit-element';\n",
      "class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g} extends LitElement {",
      "\tstatic get styles() {",
      "\t\treturn css`...`",
      "\t}",
      "\n\tstatic get properties() {",
      "\t\treturn { ${2:prop}: ${3:propType} };",
      "\t}\n",
      "\trender() {",
      "\t\treturn html`${4:template}`",
      "\t}",
      "}",
      "customElements.define('${TM_FILENAME_BASE/(.*)/${1:/downcase}/g}', ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g});"
    ],
    "description": "Basic Lit component"
  },
  "litComponentDecorator": {
    "prefix": "lit-component-decorator",
    "body": [
      "import { LitElement, html, css, customElement, property } from 'lit-element';\n",
      "@customElement('${TM_FILENAME_BASE/(.*)/${1:/downcase}/g}')",
      "class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g} extends LitElement {\n",
      "\t@property({type : ${3:propType}}) ${1:propName} = ${2:propValue}\n",
      "\tstatic get styles() {",
      "\t\treturn css`...`",
      "\t}",
      "\n\t// Implement `render` to define a template for your element.",
      "\trender() {",
      "\t\treturn html`${4:template}`",
      "\t}",
      "}"
    ],
    "description": "Basic Lit component using decorator"
  },
  "litRender": {
    "prefix": "lit-render",
    "body": ["\trender() {", "\t\treturn html`${1:template}`", "\t}"],
    "description": "render() method from LitElement"
  },
  "litProps": {
    "prefix": "lit-props",
    "body": [
      "static get properties() {",
      "\treturn { ${1:prop}: ${2:propType} };",
      "}"
    ],
    "description": "properties() method from LitElement"
  },
  "litPropsDecorator": {
    "prefix": "lit-props-decorator",
    "body": [
      "@property({type : ${3:propType}}) ${1:propName} = ${2:propValue}"
    ],
    "description": "@property decorator from LitElement"
  },
  "litStyles": {
    "prefix": "lit-styles",
    "body": ["static get styles() {", "\treturn css`...`", "}"],
    "description": "styles() method from LitElement"
  },
  "litCeDecorator": {
    "prefix": "lit-ce-decorator",
    "body": ["@customElement('${TM_FILENAME_BASE/(.*)/${1:/downcase}/g}')"],
    "description": "@customElement decorator from LitElement"
  },
  "litCtor": {
    "prefix": "lit-ctor",
    "body": ["constructor() {", "\tsuper()", "\t//${1:implementation}", "}"],
    "description": "Add constructor()"
  },
  "litConnectedCallback": {
    "prefix": "lit-cb",
    "body": [
      "connectedCallback() {",
      "\tsuper.connectedCallback()",
      "\t//${1:implementation}",
      "}"
    ],
    "description": "connectedCallback() from LitElement"
  },
  "litDisconnectedCallback": {
    "prefix": "lit-dcb",
    "body": ["disconnectedCallback() {", "\t${1://implementation}", "}"],
    "description": "disconnectedCallback() from LitElement"
  },
  "litFirstUpdated": {
    "prefix": "lit-first-updated",
    "body": ["firstUpdated(changedProps) {", "\t${1://implementation}", "}"],
    "description": "firstUpdated() from LitElement"
  },
  "litUpdated": {
    "prefix": "lit-updated",
    "body": ["updated(changedProps) {", "\t${1://implementation}", "}"],
    "description": "updated() from LitElement"
  },
  "litCustomEvent": {
    "prefix": "lit-ce",
    "body": [
      "const ${1/(.*)/${1:/pascalcase}/g} = new CustomEvent('${1:eventName}', { ",
      "\tdetail: { message: 'my-event happened.' },",
      "\tbubbles: true, ",
      "\tcomposed: true",
      "});"
    ],
    "description": "Create the custom event"
  },
  "litConditionalTemplate": {
    "prefix": "lit-conditional-template",
    "body": [
      "const ${4:templateName} = html`",
      "\t${${1:condition}",
      "\t\t? html`",
      "\t\t\t\t${2:template}",
      "\t\t\t`",
      "\t\t: html`",
      "\t\t\t\t${3:template}",
      "\t\t\t`",
      "\t}",
      "`;"
    ],
    "description": "Create conditional template expression"
  },
  "litTemplatesLoop": {
    "prefix": "lit-tmpl-loop",
    "body": [
      "${1:collection}.map(",
      "\t(${2:item}) => ",
      "\t\thtml`",
      "\t\t\t${2}",
      "\t\t`",
      ");"
    ],
    "description": "Iterate templates through map()"
  },
  "litStyleMap": {
    "prefix": "lit-style",
    "body": ["style=${styleMap(${1:style1}, ${2:style2}, ${3:style3})}"],
    "description": "Add `styleMap()` to the element. Import it from `lit-element` or `lit-html`"
  },
  "litClasseMap": {
    "prefix": "lit-class",
    "body": ["class=${classMap(${1:class1}, ${2:class2}, ${3:class3})}"],
    "description": "Add `classMap()` to the element. Import it from `lit-element` or `lit-html`"
  },
  "litShouldUpdate": {
    "prefix": "lit-should-update",
    "body": [
      "shouldUpdate(changedProperties) {",
      "\tchangedProperties.forEach((oldValue, propName) => {",
      "\t\t${2:// implement logic}",
      "\t});",
      "\treturn changedProperties.has(${1:propName});",
      "}"
    ],
    "description": "Implement `shouldUpdate` life cycle hook"
  },
  "litTestCase": {
    "prefix": "lit-test-open-wc",
    "body": [
      "import { litFixture, expect } from '@open-wc/testing';",
      "import {  html } from 'lit-element';\n",
      "import '../${1:component-file-name}';\n",
      "describe('${2:component-name}', () => {",
      "\tconst fixture;\n",
      "\tbeforeEach(async () => {",
      "\t\tfixture = await litFixture(html`<${2}></${2}>`);",
      "\t});\n",
      "\tit('should render correctly', () => {",
      "\t\texpect(fixture.localName).to.be.equal('${2}');",
      "\t\texpect(fixture).shadowDom.to.equalSnapshot();",
      "\t});\n",
      "\tit('is a11y AXE accessible', async () => {",
      "\t\tawait expect(fixture).to.be.accessible();",
      "\t});",
      "});"
    ],
    "description": "Test case based on @open-wc"
  },
  "wComponent": {
    "prefix": "wc",
    "body": [
      "class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g} extends HTMLElement {",
      "\tconstructor() {",
      "\t\tsuper();",
      "\t\t//${1:implementation}",
      "\t}\n",
      "\tconnectedCallback() {",
      "\t\t//${1:implementation}",
      "\t}\n",
      "\tdisconnectedCallback() {",
      "\t\t//${1:implementation}",
      "\t}\n",
      "\tattributeChangedCallback(name, oldVal, newVal) {",
      "\t\t//${1:implementation}",
      "\t}\n",
      "\tadoptedCallback() {",
      "\t\t//${1:implementation}",
      "\t}\n",
      "}",
      "",
      "const tagName = ${TM_FILENAME_BASE/(.*)/${1:/downcase}/g}",
      "",
      "if(!window.customElements.get(tagName)) {",
      "\twindow.customElements.define(tagName, ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g});",
      "}"
    ],
    "description": "Basic Web Component"
  },
  "wcObservedAttributes": {
    "prefix": "wc-observed-attrs",
    "body": [
      "static get observedAttributes() {",
      "\treturn ['${1:attrName}'];",
      "}"
    ],
    "description": "Define `observedAttributes`"
  },
  "wcAdoptedCallback": {
    "prefix": "wc-adopted-cb",
    "body": ["static get adoptedCallback() {", "\t//${1:implementation}", "}"],
    "description": "Define `adoptedCallback`"
  },
  "wcAttributeChangedCallback": {
    "prefix": "wc-attribute-changed-cb",
    "body": [
      "attributeChangedCallback(name, oldVal, newVal) {",
      "\t//${1:implementation}",
      "}"
    ],
    "description": "Define `attributeChangedCallback`"
  },
  "wcSlot": {
    "prefix": "wc-slot",
    "body": ["<slot></slot>"],
    "description": "Define <slot>"
  },
  "wcSlotNamed": {
    "prefix": "wc-slot-named",
    "body": ["<slot name=\"${1:slotName}\"></slot>"],
    "description": "Define <slot> with name"
  },
  "stencilComponent": {
    "prefix": "stencil-component",
    "body": [
      "import { Component, Prop, h } from '@stencil/core';\n",
      "@Component({",
      "\ttag: '${TM_FILENAME_BASE/(.*)/${1:/downcase}/g}',",
      "\tstyleUrl: '${TM_FILENAME_BASE/(.*)/${1:/downcase}/g}.css',",
      "})",
      "export class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}Component {",
      "\t@Prop() ${1:propName}:${2:propType}\n",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<p>",
      "\t\t\t\t${3://content}",
      "\t\t\t</p>",
      "\t\t);",
      "\t}",
      "}"
    ],
    "description": "Stencil Component"
  },
  "stencilFunctionalComponent": {
    "prefix": "stencil-functional-component",
    "body": [
      "import { FunctionalComponent, Prop, h } from '@stencil/core';\n",
      "interface ${1:entity}Props {",
      "\t${2://props}",
      "}\n",
      "export const ${1}: FunctionalComponent<${1}Props> = (${3:args}) => (",
      "\t${4://template}",
      ");"
    ],
    "description": "Stencil Functional Component"
  },
  "stencilProperty": {
    "prefix": "stencil-prop",
    "body": ["@Prop() ${1:propName}:${2:propType};"],
    "description": "@Prop decorator from Stencil"
  },
  "stencilElement": {
    "prefix": "stencil-element",
    "body": ["@Element() ${1:elementName}:HTMLElement;"],
    "description": "@Element decorator from `@stencil/core`"
  },
  "stencilEvent": {
    "prefix": "stencil-event",
    "body": ["@Event() ${1:eventName}:EventEmitter<${2:eventType}>;"],
    "description": "@Event decorator from `@stencil/core`"
  },
  "stencilMethodAsync": {
    "prefix": "stencil-method-async",
    "body": [
      "@Method()",
      "async ${1:methodName}() {",
      "\t${2://implementation}",
      "}"
    ],
    "description": "@Method(async) decorator from `@stencil/core`"
  },
  "stencilMethodPromise": {
    "prefix": "stencil-method-promise",
    "body": ["@Method()", "${1:methodName}() {", "\t$return {2:Promise}", "}"],
    "description": "@Method decorator as returning promise from `@stencil/core`"
  },
  "stencilCompWillLoad": {
    "prefix": "stencil-component-will-load",
    "body": ["componentWillLoad() {", "\t${1://implementation}", "}"],
    "description": "componentWillLoad life cycle hook"
  },
  "stencilCompDidLoad": {
    "prefix": "stencil-component-did-load",
    "body": ["componentDidLoad() {", "\t${1://implementation}", "}"],
    "description": "componentDidLoad life cycle hook"
  },
  "stencilCompWillRender": {
    "prefix": "stencil-component-will-render",
    "body": ["componentWillRender() {", "\t${1://implementation}", "}"],
    "description": "componentWillRender life cycle hook"
  },
  "stencilCompDidRender": {
    "prefix": "stencil-component-did-render",
    "body": ["componentDidRender() {", "\t${1://implementation}", "}"],
    "description": "componentDidRender life cycle hook"
  },
  "stencilCompWillUpdate": {
    "prefix": "stencil-component-will-update",
    "body": ["componentWillUpdate() {", "\t${1://implementation}", "}"],
    "description": "componentWillUpdate life cycle hook"
  },
  "stencilCompDidUpdate": {
    "prefix": "stencil-component-did-update",
    "body": ["componentDidUpdate() {", "\t${1://implementation}", "}"],
    "description": "componentDidUpdate life cycle hook"
  },
  "stencilConnectedCallback": {
    "prefix": "stencil-cb",
    "body": ["connectedCallback() {", "\t${1://implementation}", "}"],
    "description": "connectedCallback() from Stencil"
  },
  "stencilDisconnectedCallback": {
    "prefix": "stencil-dcb",
    "body": ["disconnectedCallback() {", "\t${1://implementation}", "}"],
    "description": "disconnectedCallback() from Stencil"
  },
  "fastComponent": {
    "prefix": "fast-component",
    "body": [
      "import { FASTElement, css, customElement, attr, html } from '@microsoft/fast-element';\n",
      "const template = html<${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}>`",
      "\t<h3>${x => x.greeting} World!</h3>",
      "`;\n",
      "const styles = css`",
      "\t:host {",
      "\t\t //styles",
      "\t}",
      "`;\n",
      "@customElement({",
      "\tname: '${TM_FILENAME_BASE/(.*)/${1:/downcase}/g}',",
      "\ttemplate,",
      "\tstyles",
      "})",
      "export class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g} extends FASTElement {",
      "\t@attr greeting: string = 'Hello';",
      "\n\t${2://other logic}\n",
      "}"
    ],
    "description": "Basic FASTElement Component"
  },
  "fastConnectedCallback": {
    "prefix": "fast-cb",
    "body": [
      "connectedCallback() {",
      "\tsuper.connectedCallback();",
      "\t${1://implementation}",
      "}"
    ],
    "description": "connectedCallback() from FASTElement"
  },
  "fastDisconnectedCallback": {
    "prefix": "fast-dcb",
    "body": [
      "disconnectedCallback() {",
      "\tsuper.disconnectedCallback();",
      "\t${1://implementation}",
      "}"
    ],
    "description": "disconnectedCallback() from FASTElement"
  },
  "fastObservable": {
    "prefix": "fast-observable",
    "body": [
      "@observable ${1:observableName}: ${2:observableType} = ${3:value};"
    ],
    "description": "@observable decorator from FASTElement"
  },
  "fastObservableNotify": {
    "prefix": "fast-observable-notify",
    "body": ["Observable.notify(this, '${1:propName}');"],
    "description": "Observable.notify from FASTElement"
  },
  "fastObservableTrack": {
    "prefix": "fast-observable-track",
    "body": ["Observable.track(this, '${1:propName}');"],
    "description": "Observable.track from FASTElement"
  },
  "fastAttr": {
    "prefix": "fast-attr",
    "body": ["@attr ${1:attrName}: ${2:attrType} = ${3:value};"],
    "description": "@attr decorator from FASTElement"
  },
  "fastDispatchEvent": {
    "prefix": "fast-dispatch",
    "body": ["this.\\$emit('${1:eventType}', ${2:value});"],
    "description": "Dispatch event using this.$emit"
  },
  "fastWhen": {
    "prefix": "fast-when",
    "body": ["${when(${1:condition}, ${2:templateOrTemplateExpression})}"],
    "description": "when directive"
  }
}
